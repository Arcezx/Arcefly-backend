package com.example.prueba.controllers;

import com.example.prueba.dtos.requests.CreateViajeRequest;
import com.example.prueba.dtos.responses.ViajeResponse;
import com.example.prueba.models.Viaje;
import com.example.prueba.repositories.ViajeRepository;
import com.example.prueba.services.ViajeService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/viajes")
@RequiredArgsConstructor
@CrossOrigin(origins = "*") // Para permitir peticiones desde el frontend
public class ViajeController {
    private final ViajeRepository viajeRepository;
    private final ViajeService viajeService;
//    @GetMapping
//    public List<Viaje> obtenerTodos() {
//        return viajeRepository.findAll();
//    }
    @PostMapping
    public ResponseEntity<ViajeResponse> crearViaje(@Valid @RequestBody CreateViajeRequest request) {
        return ResponseEntity.ok(viajeService.crearViaje(request));
    }
    // 2. Obtener todos los viajes (YA LISTO)
    @GetMapping
    public ResponseEntity<List<ViajeResponse>> obtenerTodos() {
        return ResponseEntity.ok(viajeService.obtenerTodos());
    }
    // 3. Nuevo: Obtener viaje por ID
    @GetMapping("/{id}")
    public ResponseEntity<ViajeResponse> obtenerPorId(@PathVariable Integer id) {
        return ResponseEntity.ok(viajeService.obtenerPorId(id));
    }

    // 4. Nuevo: Actualizar viaje
    @PutMapping("/{id}")
    public ResponseEntity<ViajeResponse> actualizarViaje(
            @PathVariable Integer id,
            @Valid @RequestBody CreateViajeRequest request
    ) {
        return ResponseEntity.ok(viajeService.actualizarViaje(id, request));
    }

    // 5. Nuevo: Eliminar viaje
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminarViaje(@PathVariable Integer id) {
        viajeService.eliminarViaje(id);
        return ResponseEntity.noContent().build();
    }

}
